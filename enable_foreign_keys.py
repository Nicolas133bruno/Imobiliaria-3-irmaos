import sqlite3
from sqlite3 import Error

def enable_and_fix_foreign_keys():
    try:
        conn = sqlite3.connect('imobiliaria.db')
        cursor = conn.cursor()
        
        print("üîß Habilitando e corrigindo foreign keys...")
        
        # Habilitar foreign keys
        cursor.execute("PRAGMA foreign_keys = ON")
        print("‚úÖ Foreign keys habilitadas")
        
        # Verificar se h√° erros de foreign key
        cursor.execute("PRAGMA foreign_key_check")
        fk_errors = cursor.fetchall()
        
        if fk_errors:
            print(f"\n‚ö†Ô∏è  Encontrados {len(fk_errors)} erros de foreign key:")
            
            for error in fk_errors:
                table, rowid, ref_table, ref_rowid = error
                print(f"  - {table}.{rowid} ‚Üí {ref_table}.{ref_rowid}")
                
                # Para cada erro, vamos verificar se a refer√™ncia existe
                cursor.execute(f"SELECT COUNT(*) FROM {ref_table} WHERE id_{ref_table.lower()} = {ref_rowid}")
                ref_exists = cursor.fetchone()[0] > 0
                
                if ref_exists:
                    print(f"    ‚úÖ Refer√™ncia {ref_table}.{ref_rowid} existe")
                    # Se a refer√™ncia existe, o problema pode ser tempor√°rio
                    # Vamos tentar atualizar o registro para for√ßar a valida√ß√£o
                    try:
                        if table == 'Contrato_Venda':
                            cursor.execute(f"""
                                UPDATE Contrato_Venda 
                                SET fk_id_usuario = {ref_rowid}
                                WHERE rowid = {rowid}
                            """)
                        elif table == 'Visita':
                            cursor.execute(f"""
                                UPDATE Visita 
                                SET fk_id_usuario = {ref_rowid}
                                WHERE rowid = {rowid}
                            """)
                        print(f"    ‚úÖ Registro {table}.{rowid} atualizado")
                    except Error as update_error:
                        print(f"    ‚ùå Erro ao atualizar: {update_error}")
                else:
                    print(f"    ‚ùå Refer√™ncia {ref_table}.{ref_rowid} n√£o existe!")
                    # Remover registro problem√°tico
                    cursor.execute(f"DELETE FROM {table} WHERE rowid = {rowid}")
                    print(f"    ‚úÖ Registro {table}.{rowid} removido")
        else:
            print("\n‚úÖ Nenhum erro de foreign key encontrado")
        
        # Commit das mudan√ßas
        conn.commit()
        
        # Verificar novamente
        cursor.execute("PRAGMA foreign_key_check")
        remaining_errors = cursor.fetchall()
        
        if remaining_errors:
            print(f"\n‚ùå Ainda h√° {len(remaining_errors)} erros:")
            for error in remaining_errors:
                print(f"  - {error}")
            
            # Se ainda houver erros, criar uma c√≥pia limpa do banco
            print("\nüîÑ Criando backup e recriando banco...")
            
        else:
            print("\n‚úÖ Todos os erros de foreign key resolvidos!")
        
        conn.close()
        
        # Testar a conex√£o com foreign keys habilitadas
        test_foreign_keys()
        
    except Error as e:
        print(f"‚ùå Erro: {e}")

def test_foreign_keys():
    """Testar se as foreign keys est√£o funcionando"""
    try:
        conn = sqlite3.connect('imobiliaria.db')
        cursor = conn.cursor()
        
        # Habilitar foreign keys
        cursor.execute("PRAGMA foreign_keys = ON")
        
        # Tentar inserir um registro com refer√™ncia inv√°lida
        try:
            cursor.execute("INSERT INTO Visita (data_visita, hora_visita, status_visita, fk_id_usuario, fk_id_corretor, fk_id_imovel) VALUES ('2023-01-01', '10:00:00', 'Agendada', 999, 1, 1)")
            conn.commit()
            print("‚ùå Foreign keys N√ÉO est√£o funcionando - inseriu refer√™ncia inv√°lida")
        except Error as e:
            print("‚úÖ Foreign keys funcionando corretamente - bloqueou inser√ß√£o inv√°lida")
            
        conn.close()
        
    except Error as e:
        print(f"‚ùå Erro no teste: {e}")

if __name__ == "__main__":
    enable_and_fix_foreign_keys()