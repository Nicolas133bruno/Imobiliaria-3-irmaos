#!/usr/bin/env python3
"""
Script para testar as valida√ß√µes implementadas nos schemas Pydantic
"""

from datetime import date, datetime
from decimal import Decimal
from schemas import (
    UsuarioCreate, CorretorCreate, EnderecoCreate, 
    ImovelCreate, VisitaCreate
)

def test_validacoes_usuario():
    """Testa valida√ß√µes do schema Usuario"""
    print("üß™ Testando valida√ß√µes de Usu√°rio...")
    
    # Teste 1: CPF v√°lido
    try:
        usuario = UsuarioCreate(
            nome="Jo√£o Silva",
            cpf="123.456.789-09",  # CPF v√°lido (fict√≠cio)
            telefone="(31) 99999-9999",
            email="joao@email.com",
            data_nascimento=date(1990, 1, 1),
            sexo="M",
            login_usu="joao123",
            senha_usu="senha123",
            fk_Perfil_id=1
        )
        print("  ‚úÖ CPF v√°lido - OK")
    except Exception as e:
        print(f"  ‚ùå CPF v√°lido - ERRO: {e}")
    
    # Teste 2: CPF inv√°lido
    try:
        usuario = UsuarioCreate(
            nome="Jo√£o Silva",
            cpf="111.111.111-11",  # CPF inv√°lido (sequ√™ncia repetida)
            telefone="(31) 99999-9999",
            email="joao@email.com",
            data_nascimento=date(1990, 1, 1),
            sexo="M",
            login_usu="joao123",
            senha_usu="senha123",
            fk_Perfil_id=1
        )
        print("  ‚ùå CPF inv√°lido - DEVERIA FALHAR")
    except Exception as e:
        print(f"  ‚úÖ CPF inv√°lido - OK: {e}")

def test_validacoes_corretor():
    """Testa valida√ß√µes do schema Corretor"""
    print("\nüß™ Testando valida√ß√µes de Corretor...")
    
    # Teste 1: CRECI v√°lido
    try:
        corretor = CorretorCreate(
            creci="MG-12345",
            fk_usuario_id=1
        )
        print("  ‚úÖ CRECI v√°lido - OK")
    except Exception as e:
        print(f"  ‚ùå CRECI v√°lido - ERRO: {e}")
    
    # Teste 2: CRECI inv√°lido
    try:
        corretor = CorretorCreate(
            creci="12345",  # Formato inv√°lido
            fk_usuario_id=1
        )
        print("  ‚ùå CRECI inv√°lido - DEVERIA FALHAR")
    except Exception as e:
        print(f"  ‚úÖ CRECI inv√°lido - OK: {e}")

def test_validacoes_endereco():
    """Testa valida√ß√µes do schema Endereco"""
    print("\nüß™ Testando valida√ß√µes de Endere√ßo...")
    
    # Teste 1: Endere√ßo v√°lido
    try:
        endereco = EnderecoCreate(
            logradouro="Rua das Flores",
            numero="123",
            bairro="Centro",
            cidade="Belo Horizonte",
            estado="MG",
            cep="30130-123"
        )
        print("  ‚úÖ Endere√ßo v√°lido - OK")
    except Exception as e:
        print(f"  ‚ùå Endere√ßo v√°lido - ERRO: {e}")
    
    # Teste 2: Estado inv√°lido
    try:
        endereco = EnderecoCreate(
            logradouro="Rua das Flores",
            numero="123",
            bairro="Centro",
            cidade="Belo Horizonte",
            estado="XX",  # Estado inv√°lido
            cep="30130-123"
        )
        print("  ‚ùå Estado inv√°lido - DEVERIA FALHAR")
    except Exception as e:
        print(f"  ‚úÖ Estado inv√°lido - OK: {e}")

def test_validacoes_imovel():
    """Testa valida√ß√µes do schema Imovel"""
    print("\nüß™ Testando valida√ß√µes de Im√≥vel...")
    
    # Teste 1: Im√≥vel v√°lido
    try:
        imovel = ImovelCreate(
            area_total=Decimal("100.00"),
            quarto=3,
            banheiro=2,
            vaga_garagem=1,
            valor=Decimal("300000.00"),
            tipo="Casa",
            desc_tipo_imovel="Casa com 3 quartos",
            fk_id_status=1,
            fk_id_endereco=1,
            fk_id_corretor=1
        )
        print("  ‚úÖ Im√≥vel v√°lido - OK")
    except Exception as e:
        print(f"  ‚ùå Im√≥vel v√°lido - ERRO: {e}")
    
    # Teste 2: Tipo de im√≥vel inv√°lido
    try:
        imovel = ImovelCreate(
            area_total=Decimal("100.00"),
            quarto=3,
            banheiro=2,
            vaga_garagem=1,
            valor=Decimal("300000.00"),
            tipo="Mans√£o",  # Tipo inv√°lido
            desc_tipo_imovel="Mans√£o enorme",
            fk_id_status=1,
            fk_id_endereco=1,
            fk_id_corretor=1
        )
        print("  ‚ùå Tipo inv√°lido - DEVERIA FALHAR")
    except Exception as e:
        print(f"  ‚úÖ Tipo inv√°lido - OK: {e}")

def test_validacoes_visita():
    """Testa valida√ß√µes do schema Visita"""
    print("\nüß™ Testando valida√ß√µes de Visita...")
    
    # Teste 1: Visita v√°lida
    try:
        visita = VisitaCreate(
            data_visita=date(2026, 1, 15),  # Data realmente futura
            hora_visita="14:30",
            status_visita="Agendada",
            fk_id_usuario=1,
            fk_id_corretor=1,
            fk_id_imovel=1
        )
        print("  ‚úÖ Visita v√°lida - OK")
    except Exception as e:
        print(f"  ‚ùå Visita v√°lida - ERRO: {e}")
    
    # Teste 2: Data de visita no passado
    try:
        visita = VisitaCreate(
            data_visita=date(2023, 1, 1),  # Data passada
            hora_visita="14:30",
            status_visita="Agendada",
            fk_id_usuario=1,
            fk_id_corretor=1,
            fk_id_imovel=1
        )
        print("  ‚ùå Data passada - DEVERIA FALHAR")
    except Exception as e:
        print(f"  ‚úÖ Data passada - OK: {e}")

def main():
    """Fun√ß√£o principal de teste"""
    print("üöÄ TESTE DAS VALIDA√á√ïES DA API")
    print("=" * 50)
    
    test_validacoes_usuario()
    test_validacoes_corretor()
    test_validacoes_endereco()
    test_validacoes_imovel()
    test_validacoes_visita()
    
    print("\n" + "=" * 50)
    print("‚úÖ Testes completados!")
    print("üìã Verifique se todas as valida√ß√µes est√£o funcionando corretamente")

if __name__ == "__main__":
    main()