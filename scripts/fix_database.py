import sqlite3
from sqlite3 import Error

def fix_database_issues():
    try:
        # Conectar ao banco de dados
        conn = sqlite3.connect('imobiliaria.db')
        cursor = conn.cursor()
        
        print("üîß Corrigindo problemas do banco de dados...")
        
        # Verificar e corrigir erros de chave estrangeira
        cursor.execute("PRAGMA foreign_key_check")
        fk_errors = cursor.fetchall()
        
        if fk_errors:
            print(f"\n‚ö†Ô∏è  Encontrados {len(fk_errors)} erros de chave estrangeira:")
            
            for error in fk_errors:
                table, rowid, ref_table, ref_rowid = error
                print(f"  - {table}.{rowid} ‚Üí {ref_table}.{ref_rowid}")
                
                # Verificar se a refer√™ncia existe
                cursor.execute(f"SELECT COUNT(*) FROM {ref_table} WHERE id_{ref_table.lower()} = {ref_rowid}")
                ref_exists = cursor.fetchone()[0] > 0
                
                if not ref_exists:
                    print(f"    ‚ùå Refer√™ncia {ref_table}.{ref_rowid} n√£o existe!")
                    # Remover registro problem√°tico
                    cursor.execute(f"DELETE FROM {table} WHERE rowid = {rowid}")
                    print(f"    ‚úÖ Registro {table}.{rowid} removido")
                else:
                    print(f"    ‚úÖ Refer√™ncia {ref_table}.{ref_rowid} existe")
                    # Pode ser um problema de valida√ß√£o, vamos verificar os dados
                    cursor.execute(f"SELECT * FROM {table} WHERE rowid = {rowid}")
                    problem_data = cursor.fetchone()
                    print(f"    üìä Dados: {problem_data}")
        else:
            print("\n‚úÖ Nenhum erro de chave estrangeira encontrado")
        
        # Commit das mudan√ßas
        conn.commit()
        
        # Verificar se ainda h√° erros
        cursor.execute("PRAGMA foreign_key_check")
        remaining_errors = cursor.fetchall()
        
        if remaining_errors:
            print(f"\n‚ùå Ainda h√° {len(remaining_errors)} erros ap√≥s corre√ß√£o:")
            for error in remaining_errors:
                print(f"  - {error}")
        else:
            print("\n‚úÖ Todos os erros de chave estrangeira foram resolvidos!")
        
        conn.close()
        print("\n‚úÖ Corre√ß√£o do banco de dados conclu√≠da")
        
    except Error as e:
        print(f"‚ùå Erro ao corrigir banco de dados: {e}")

if __name__ == "__main__":
    fix_database_issues()