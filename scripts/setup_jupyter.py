#!/usr/bin/env python3
"""
Script de configura√ß√£o para JupyterLab - Imobili√°ria 3 Irm√£os
Este script configura o ambiente JupyterLab para desenvolvimento s√™nior
"""

import subprocess
import sys
import os
from pathlib import Path

def install_requirements():
    """Instala os requisitos do JupyterLab"""
    print("üîß Instalando requisitos do JupyterLab...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements_jupyter.txt"])
        print("‚úÖ Requisitos instalados com sucesso!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar requisitos: {e}")
        return False

def setup_jupyter_extensions():
    """Configura extens√µes do JupyterLab"""
    print("üîß Configurando extens√µes do JupyterLab...")
    
    extensions = [
        "jupyterlab-git",
        "jupyterlab-lsp",
        "jupyterlab-code-formatter"
    ]
    
    for extension in extensions:
        try:
            subprocess.check_call([sys.executable, "-m", "jupyter", "labextension", "install", extension])
            print(f"‚úÖ Extens√£o {extension} instalada!")
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è Erro ao instalar {extension}: {e}")

def create_jupyter_config():
    """Cria configura√ß√£o personalizada do JupyterLab"""
    print("üîß Criando configura√ß√£o do JupyterLab...")
    
    config_dir = Path.home() / ".jupyter"
    config_dir.mkdir(exist_ok=True)
    
    # Configura√ß√£o do JupyterLab
    lab_config = """
{
  "ServerApp": {
    "port": 8888,
    "ip": "127.0.0.1",
    "open_browser": true,
    "allow_root": false
  },
  "LabApp": {
    "dev_mode": false,
    "watch": false
  }
}
"""
    
    config_file = config_dir / "jupyter_lab_config.json"
    with open(config_file, "w") as f:
        f.write(lab_config)
    
    print(f"‚úÖ Configura√ß√£o salva em: {config_file}")

def create_env_file():
    """Cria arquivo .env para configura√ß√µes sens√≠veis"""
    print("üîß Criando arquivo de configura√ß√£o .env...")
    
    env_content = """# Configura√ß√µes do Banco de Dados MySQL
DB_HOST=localhost
DB_PORT=3306
DB_USER=root
DB_PASSWORD=sua_senha_aqui
DB_NAME=imobiliaria_3_irmaos

# Configura√ß√µes da API
API_BASE_URL=http://localhost:8000
API_TIMEOUT=30

# Configura√ß√µes do JupyterLab
JUPYTER_PORT=8888
JUPYTER_IP=127.0.0.1

# Configura√ß√µes de Desenvolvimento
DEBUG=True
LOG_LEVEL=INFO
"""
    
    with open(".env", "w") as f:
        f.write(env_content)
    
    print("‚úÖ Arquivo .env criado!")
    print("‚ö†Ô∏è IMPORTANTE: Edite o arquivo .env com suas configura√ß√µes reais!")

def main():
    """Fun√ß√£o principal de configura√ß√£o"""
    print("üöÄ Configurando JupyterLab para Imobili√°ria 3 Irm√£os")
    print("=" * 60)
    
    # Verificar se estamos no diret√≥rio correto
    if not Path("main.py").exists():
        print("‚ùå Execute este script no diret√≥rio raiz do projeto!")
        return False
    
    # Instalar requisitos
    if not install_requirements():
        return False
    
    # Configurar extens√µes
    setup_jupyter_extensions()
    
    # Criar configura√ß√µes
    create_jupyter_config()
    create_env_file()
    
    print("\nüéâ Configura√ß√£o conclu√≠da com sucesso!")
    print("\nüìã Pr√≥ximos passos:")
    print("1. Edite o arquivo .env com suas configura√ß√µes de banco")
    print("2. Execute: jupyter lab")
    print("3. Abra o notebook: imobiliaria_analysis.ipynb")
    print("4. Configure a conex√£o MySQL no notebook")
    
    return True

if __name__ == "__main__":
    main()
